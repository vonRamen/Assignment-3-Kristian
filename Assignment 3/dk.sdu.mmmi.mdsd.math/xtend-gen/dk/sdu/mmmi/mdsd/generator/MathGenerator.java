/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import dk.sdu.mmmi.mdsd.math.Binding;
import dk.sdu.mmmi.mdsd.math.Div;
import dk.sdu.mmmi.mdsd.math.ExternalCall;
import dk.sdu.mmmi.mdsd.math.ExternalDeclaration;
import dk.sdu.mmmi.mdsd.math.LetBinding;
import dk.sdu.mmmi.mdsd.math.MathNumber;
import dk.sdu.mmmi.mdsd.math.Minus;
import dk.sdu.mmmi.mdsd.math.Mult;
import dk.sdu.mmmi.mdsd.math.Parenthesis;
import dk.sdu.mmmi.mdsd.math.Plus;
import dk.sdu.mmmi.mdsd.math.Program;
import dk.sdu.mmmi.mdsd.math.VarBinding;
import dk.sdu.mmmi.mdsd.math.VariableUse;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathGenerator extends AbstractGenerator {
  private static Map<String, Integer> variables;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Program program = Iterators.<Program>filter(resource.getAllContents(), Program.class).next();
    final List<LetBinding> allLetBindings = IteratorExtensions.<LetBinding>toList(Iterators.<LetBinding>filter(resource.getAllContents(), LetBinding.class));
    for (int i = 0; (i < allLetBindings.size()); i++) {
      LetBinding _get = allLetBindings.get(i);
      String _name = allLetBindings.get(i).getName();
      int _abs = Math.abs(allLetBindings.get(i).hashCode());
      String _plus = (_name + Integer.valueOf(_abs));
      _get.setName(_plus);
    }
    String results = MathGenerator.generateContents(program, resource);
    String _name = program.getName();
    String _plus = ("math_expression/" + _name);
    String _plus_1 = (_plus + ".java");
    fsa.generateFile(_plus_1, results);
  }
  
  public void displayPanel(final Map<String, Integer> result) {
    String resultString = "";
    Set<Map.Entry<String, Integer>> _entrySet = result.entrySet();
    for (final Map.Entry<String, Integer> entry : _entrySet) {
      String _resultString = resultString;
      String _key = entry.getKey();
      String _plus = ("var " + _key);
      String _plus_1 = (_plus + " = ");
      Integer _value = entry.getValue();
      String _plus_2 = (_plus_1 + _value);
      String _plus_3 = (_plus_2 + "\n");
      resultString = (_resultString + _plus_3);
    }
    JOptionPane.showMessageDialog(null, resultString, "Math Language", JOptionPane.INFORMATION_MESSAGE);
  }
  
  protected static String _computeExpression(final VarBinding binding) {
    return MathGenerator.computeExpression(binding.getExpression());
  }
  
  protected static String _computeExpression(final Plus exp) {
    String _computeExpression = MathGenerator.computeExpression(exp.getLeft());
    String _plus = (_computeExpression + "+");
    String _computeExpression_1 = MathGenerator.computeExpression(exp.getRight());
    return (_plus + _computeExpression_1);
  }
  
  protected static String _computeExpression(final Minus exp) {
    String _computeExpression = MathGenerator.computeExpression(exp.getLeft());
    String _plus = (_computeExpression + "-");
    String _computeExpression_1 = MathGenerator.computeExpression(exp.getRight());
    return (_plus + _computeExpression_1);
  }
  
  protected static String _computeExpression(final Mult exp) {
    String _computeExpression = MathGenerator.computeExpression(exp.getLeft());
    String _plus = (_computeExpression + "*");
    String _computeExpression_1 = MathGenerator.computeExpression(exp.getRight());
    return (_plus + _computeExpression_1);
  }
  
  protected static String _computeExpression(final Div exp) {
    String _computeExpression = MathGenerator.computeExpression(exp.getLeft());
    String _plus = (_computeExpression + "/");
    String _computeExpression_1 = MathGenerator.computeExpression(exp.getRight());
    return (_plus + _computeExpression_1);
  }
  
  protected static String _computeExpression(final MathNumber exp) {
    return Integer.valueOf(exp.getValue()).toString();
  }
  
  protected static String _computeExpression(final Parenthesis exp) {
    String _computeExpression = MathGenerator.computeExpression(exp.getExp());
    String _plus = ("(" + _computeExpression);
    return (_plus + ")");
  }
  
  protected static String _computeExpression(final ExternalCall exp) {
    String _xblockexpression = null;
    {
      String _name = exp.getFunction().getName();
      String _plus = ("external." + _name);
      String result = (_plus + "(");
      for (int i = 0; (i < exp.getExpressions().size()); i++) {
        {
          String _result = result;
          String _computeExpression = MathGenerator.computeExpression(exp.getExpressions().get(i));
          result = (_result + _computeExpression);
          int _size = exp.getExpressions().size();
          int _minus = (_size - 1);
          boolean _notEquals = (i != _minus);
          if (_notEquals) {
            String _result_1 = result;
            result = (_result_1 + ",");
          }
        }
      }
      String _result = result;
      result = (_result + ")");
      _xblockexpression = result;
    }
    return _xblockexpression;
  }
  
  protected static String _computeExpression(final LetBinding exp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("new ArrayList<Integer>(Arrays.asList(");
    String _computeExpression = MathGenerator.computeExpression(exp.getBinding());
    _builder.append(_computeExpression);
    _builder.append("))");
    _builder.newLineIfNotEmpty();
    _builder.append("  \t\t\t");
    _builder.append(".stream()");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append(".map(");
    String _name = exp.getName();
    _builder.append(_name, "  \t\t\t");
    _builder.append(" -> {");
    _builder.newLineIfNotEmpty();
    _builder.append("  \t\t\t\t");
    _builder.append("return ");
    String _computeExpression_1 = MathGenerator.computeExpression(exp.getBody());
    _builder.append(_computeExpression_1, "  \t\t\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("})");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(".findFirst()");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append(".get()");
    return _builder.toString();
  }
  
  protected static String _computeExpression(final VariableUse exp) {
    return exp.getRef().getName();
  }
  
  protected static int _computeBinding(final VarBinding binding) {
    Integer _xblockexpression = null;
    {
      boolean _containsKey = MathGenerator.variables.containsKey(binding.getName());
      boolean _not = (!_containsKey);
      if (_not) {
        MathGenerator.computeExpression(binding);
      }
      _xblockexpression = MathGenerator.variables.get(binding.getName());
    }
    return (_xblockexpression).intValue();
  }
  
  protected static String _computeBinding(final LetBinding binding) {
    return MathGenerator.computeExpression(binding.getBinding());
  }
  
  protected static String _generateContents(final Program program, final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package math_expression;");
    _builder.newLine();
    _builder.newLine();
    {
      int _size = IteratorExtensions.size(Iterators.<LetBinding>filter(resource.getAllContents(), LetBinding.class));
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        _builder.append("import java.util.ArrayList;");
        _builder.newLine();
        _builder.append("import java.util.Arrays;");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("public class ");
    String _name = program.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      List<VarBinding> _list = IteratorExtensions.<VarBinding>toList(Iterators.<VarBinding>filter(resource.getAllContents(), VarBinding.class));
      for(final VarBinding variable : _list) {
        _builder.append("  ");
        _builder.append("public int ");
        String _name_1 = variable.getName();
        _builder.append(_name_1, "  ");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.newLine();
      }
    }
    {
      if (((!Objects.equal(program.getExternalDeclarations(), null)) && (program.getExternalDeclarations().size() > 0))) {
        _builder.append("  \t\t");
        _builder.append("private External external;");
        _builder.newLine();
        _builder.append("  \t\t");
        _builder.newLine();
      }
    }
    {
      if (((!Objects.equal(program.getExternalDeclarations(), null)) && (program.getExternalDeclarations().size() > 0))) {
        _builder.append("  ");
        _builder.append("public ");
        String _name_2 = program.getName();
        _builder.append(_name_2, "  ");
        _builder.append("(External external) {");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("  ");
        _builder.append("this.external = external;");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("}");
        _builder.newLine();
      } else {
        _builder.append("  ");
        _builder.append("public ");
        String _name_3 = program.getName();
        _builder.append(_name_3, "  ");
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("  ");
    _builder.append("public void compute() {");
    _builder.newLine();
    {
      List<VarBinding> _list_1 = IteratorExtensions.<VarBinding>toList(Iterators.<VarBinding>filter(resource.getAllContents(), VarBinding.class));
      for(final VarBinding variable_1 : _list_1) {
        _builder.append("  \t");
        String _name_4 = variable_1.getName();
        _builder.append(_name_4, "  \t");
        _builder.append(" = ");
        String _computeExpression = MathGenerator.computeExpression(variable_1);
        _builder.append(_computeExpression, "  \t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    {
      if (((!Objects.equal(program.getExternalDeclarations(), null)) && (program.getExternalDeclarations().size() > 0))) {
        _builder.append("  ");
        _builder.append("public interface External {");
        _builder.newLine();
        {
          List<ExternalDeclaration> _list_2 = IteratorExtensions.<ExternalDeclaration>toList(Iterators.<ExternalDeclaration>filter(resource.getAllContents(), ExternalDeclaration.class));
          for(final ExternalDeclaration declaration : _list_2) {
            _builder.append("public int ");
            String _name_5 = declaration.getName();
            _builder.append(_name_5);
            _builder.append("(");
            String _write = MathGenerator.write(declaration.getTypeParameters());
            _builder.append(_write);
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public static String write(final List<String> parameters) {
    String _xblockexpression = null;
    {
      String res = "";
      for (int i = 0; (i < parameters.size()); i++) {
        {
          String _res = res;
          String _get = parameters.get(i);
          String _plus = (_get + " ");
          String _get_1 = parameters.get(i);
          String _plus_1 = (_plus + _get_1);
          String _plus_2 = (_plus_1 + Integer.valueOf(i));
          res = (_res + _plus_2);
          int _size = parameters.size();
          int _minus = (_size - 1);
          boolean _notEquals = (i != _minus);
          if (_notEquals) {
            String _res_1 = res;
            res = (_res_1 + ", ");
          }
        }
      }
      _xblockexpression = res;
    }
    return _xblockexpression;
  }
  
  public static String computeExpression(final EObject exp) {
    if (exp instanceof Div) {
      return _computeExpression((Div)exp);
    } else if (exp instanceof ExternalCall) {
      return _computeExpression((ExternalCall)exp);
    } else if (exp instanceof LetBinding) {
      return _computeExpression((LetBinding)exp);
    } else if (exp instanceof MathNumber) {
      return _computeExpression((MathNumber)exp);
    } else if (exp instanceof Minus) {
      return _computeExpression((Minus)exp);
    } else if (exp instanceof Mult) {
      return _computeExpression((Mult)exp);
    } else if (exp instanceof Parenthesis) {
      return _computeExpression((Parenthesis)exp);
    } else if (exp instanceof Plus) {
      return _computeExpression((Plus)exp);
    } else if (exp instanceof VarBinding) {
      return _computeExpression((VarBinding)exp);
    } else if (exp instanceof VariableUse) {
      return _computeExpression((VariableUse)exp);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(exp).toString());
    }
  }
  
  public static Object computeBinding(final Binding binding) {
    if (binding instanceof LetBinding) {
      return _computeBinding((LetBinding)binding);
    } else if (binding instanceof VarBinding) {
      return _computeBinding((VarBinding)binding);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(binding).toString());
    }
  }
  
  public static String generateContents(final Program program, final Resource resource) {
    return _generateContents(program, resource);
  }
}
