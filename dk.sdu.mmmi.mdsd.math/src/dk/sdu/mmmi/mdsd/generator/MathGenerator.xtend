/*
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.generator

import dk.sdu.mmmi.mdsd.math.Div
import dk.sdu.mmmi.mdsd.math.LetBinding
import dk.sdu.mmmi.mdsd.math.MathExp
import dk.sdu.mmmi.mdsd.math.MathNumber
import dk.sdu.mmmi.mdsd.math.Minus
import dk.sdu.mmmi.mdsd.math.Mult
import dk.sdu.mmmi.mdsd.math.Plus
import dk.sdu.mmmi.mdsd.math.VarBinding
import dk.sdu.mmmi.mdsd.math.VariableUse
import java.util.HashMap
import java.util.Map
import javax.swing.JOptionPane
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import dk.sdu.mmmi.mdsd.math.Program
import dk.sdu.mmmi.mdsd.math.ExternalDeclaration
import java.util.List
import dk.sdu.mmmi.mdsd.math.ExternalCall
import dk.sdu.mmmi.mdsd.math.Parenthesis
import dk.sdu.mmmi.mdsd.math.Expression

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathGenerator extends AbstractGenerator {
	static Map<String, Integer> variables;

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val program = resource.allContents.filter(Program).next
		//result.displayPanel
		val allLetBindings = resource.allContents.filter(LetBinding).toList()
		
		for(var i = 0; i < allLetBindings.size; i++) {
			allLetBindings.get(i).name = allLetBindings.get(i).name + Math.abs(allLetBindings.get(i).hashCode)
		}
		
		var results = program.generateContents(resource)
		
		fsa.generateFile('math_expression/'+program.name+'.java', results)
	}
		
	def void displayPanel(Map<String, Integer> result) {
		var resultString = ""
		for (entry : result.entrySet()) {
         	resultString += "var " + entry.getKey() + " = " + entry.getValue() + "\n"
        }
		
		JOptionPane.showMessageDialog(null, resultString ,"Math Language", JOptionPane.INFORMATION_MESSAGE)
	}
	
	def static dispatch String computeExpression(VarBinding binding) {
		binding.expression.computeExpression()
	}

	def static dispatch String computeExpression(Plus exp) {
		exp.left.computeExpression + "+" + exp.right.computeExpression
	}
	
	def static dispatch String computeExpression(Minus exp) {
		exp.left.computeExpression + "-" + exp.right.computeExpression
	}
	
	def static dispatch String computeExpression(Mult exp) {
		exp.left.computeExpression + "*" + exp.right.computeExpression
	}
	
	def static dispatch String computeExpression(Div exp) {
		exp.left.computeExpression + "/" + exp.right.computeExpression
	}
	
	def static dispatch String computeExpression(MathNumber exp) {
		exp.value.toString
	}
	
	def static dispatch String computeExpression(Parenthesis exp) {
		"(" + exp.exp.computeExpression + ")"
	}
	
	def static dispatch String computeExpression(ExternalCall exp) {
		var result = "external." + exp.function.name + "("
		
		for(var i = 0; i < exp.expressions.size; i++) {
			result += exp.expressions.get(i).computeExpression
			
			if(i != exp.expressions.size - 1) {
				result += ","
			}
		}
		
		result += ")"
		
		result
	}

	def static dispatch String computeExpression(LetBinding exp) '''
		new ArrayList<Integer>(Arrays.asList(«exp.binding.computeExpression»))
		  			.stream()
		  			.map(«exp.name» -> {
		  				return «exp.body.computeExpression»;
					})
					.findFirst()
		  			.get()'''
	
	
	def static dispatch String computeExpression(VariableUse exp) {
		exp.ref.name
	}

	def static dispatch int computeBinding(VarBinding binding){
		if(!variables.containsKey(binding.name))
			binding.computeExpression()			
		variables.get(binding.name)
	}
	
	def static dispatch String computeBinding(LetBinding binding){
		binding.binding.computeExpression
	}
	
	def static dispatch String generateContents(Program program, Resource resource) '''
		package math_expression;
		
		«IF resource.allContents.filter(LetBinding).size > 0»
		import java.util.ArrayList;
		import java.util.Arrays;
		«ENDIF»
		
		public class «program.name» {
		
		  «FOR variable: resource.allContents.filter(VarBinding).toList»
		  public int «variable.name»;
		  
		  «ENDFOR»
  		«IF program.externalDeclarations != null && program.externalDeclarations.size > 0»
  		private External external;
  		
  		«ENDIF»
		  «IF program.externalDeclarations != null && program.externalDeclarations.size > 0»
		  public «program.name»(External external) {
		    this.external = external;
		  }
		  «ELSE»
		  public «program.name»() {
		  }
		  «ENDIF»
		
		  public void compute() {
		  	«FOR variable: resource.allContents.filter(VarBinding).toList»
		  	«variable.name» = «variable.computeExpression»;
		  	«ENDFOR»
		  }
		
		
		«IF program.externalDeclarations != null && program.externalDeclarations.size > 0»
		    public interface External {
		  «FOR declaration: resource.allContents.filter(ExternalDeclaration).toList»
			public int «declaration.name»(«declaration.typeParameters.write»);
		  «ENDFOR»
		  }
		«ENDIF»
		}
	'''
	
	def static String write(List<String> parameters) {
		var res = ""
		for(var i = 0; i < parameters.size; i++) {
			res += parameters.get(i) +" "+ parameters.get(i)+i;
			
			if(i != parameters.size - 1) {
				res+=", "
			}
		}
		
		res
	}
}
